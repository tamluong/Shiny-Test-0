rm(list=ls())
####Introduction#####
#Example Script
1+1
#create a very simple object, a, with numeric elements 1 and 2
a <- c(1,2)
a
A
#Setting Working Directory
input <- "//AGBOSNAS1/DATA/SHARE/R/2017/Class 1/Code & Examples/Input"
output <- "//AGBOSNAS1/DATA/SHARE/R/2017/Class 1/Code & Examples/Output"
temp <- "//AGBOSNAS1/DATA/SHARE/R/2017/Class 1/Code & Examples/Temp"
setwd(input)
#assuming the "Code & Examples" folder has the
#following subfolders: Input, Output, and Temp
baseball <- read.csv("baseballFULL.csv", header=TRUE)
#Switch to another working directory by invoking those objects
setwd(output)
write.csv(baseball, file="baseball_out.csv", row.names=FALSE)
#Example graphics
install.packages("rgl", dependencies=TRUE)
library(rgl)
library(MASS)
#demo(rgl)
#demo(abundance)
demo(regression)
demo(bivar)
####Data Types and Structure####
#### A. Scalars & Vectors ####
#Vector Creation#
pi
is.vector(pi)
#make object x with a vector containing elements 1,2,3,and 4
x <- c(1,2,3,4)
x
typeof(x)
is.numeric(x)
is.double(x)
length(x)
#using the combine function to create a vector from other vectors
x1 <- c(3,2,1)
x2 <- c(4,5,6)
x3 <- c(7,8,9)
x4 <- c(x1,x2,x3)
x4
#examples of using vectors with special properties
#a vector of consecutive integers
y <- 1:4
y
#a vector with repeating values, using the rep() function
x <- rep(1,10)
x
#a vector whose components are part of a sequence, using the seq() function
?seq
x <- seq(1,20,2)
x
#vector with elements that are characters
AG_Office <- c("Beijing", "Boston", "Chicago", "Dallas",
"Denver", "Los Angeles", "Menlo Park",
"Montreal", "New York", "San Francisco", "Washington")
AG_Office
#Indexing Elements of a vector; subvector <- Vector[index]#
#a: Index vector of positive integers
AG_Office[4]
AG_Office[c(2,5)]
#gives us the second to last element of the vector AG_Office -- Possible Question Time
second_to_last <- AG_Office[length(AG_Office)-1]
second_to_last
#adding an office to the AG_office vector
AG_Office <- c("Beijing", "Boston", "Chicago", "Dallas",
"Denver", "Los Angeles", "Menlo Park",
"Montreal", "New York", "San Francisco", "Washington",
"Brussels", "London")
second_to_last <- AG_Office[length(AG_Office)-1]
second_to_last
#trying to use an index value greater than length(x)
AG_Office[15]
#b: index vector of negative integers; Subvector Returns all except 3rd element
#all of AG_Office except for the third element
AG_Office_Ex_Dallas <- AG_Office[-4]
AG_Office_Ex_Dallas
#c: vector of character string/names
#first, change names of positons in the vector;
#attach alphanumeric names to vector
#elements
fruit_prices <- c(1.1,3.5,5.4,2.3)
fruit_prices
names(fruit_prices) <- c("orange", "banana", "apple", "peach")
fruit_prices
lunch <- fruit_prices[c("apple", "orange")]
lunch
#d: logical Vector -- conditional indexing
#vector that evaluates to boolean; Boston = #1 "AG_Office" so 1st position evaluates to True
is_Boston_Office <- AG_Office=="Boston"
is_Boston_Office
AG_Office[is_Boston_Office]
#### Vector Functions ####
#functions are performed on vectors element by element -- like an internal loop
a <- 1:10
a
a+1
#summary statistics
#Create a vector of 100 random normally distributed values with mean 0 and standard deviation 1
#Question time: What should we feed this function? What does it output?
?rnorm
x <- rnorm(n=100,mean=0,sd=1)
length(x)
summary(x)
mean(x)
sd(x)
#arithmetic operations
x <- c(1,2,3)
y <- c(4,5,6)
x+1
x+y
#%in%
x <- c(1,3,5)
z <- c(3,5,7)
x %in% z
#sample error
x <- c(1,2,3,4)
y <- c(6,0,9,20,22,23)
x+y
#using NA
#try to take the mean of a vector which contains a single NA value
x <- c(100, NA, 200, 300, 400)
x
mean(x)
mean(x, na.rm=TRUE)
# Transition
X <- matrix(c(1,2,3,4), nrow=2,ncol=2)
X
#byrow argument in the matrix() function
X <- matrix(c(1,2,3,4),nrow=2,byrow=TRUE)
X
is.matrix(X)
typeof(X)
length(X)
nrow(X)
ncol(X)
#combine the same three vectors first using rbind() and cbind()
x1 <- c(1,2,3)
x2 <- x1+3
x3 <- x1+4
y <- rbind(x1,x2,x3)
y
y <- cbind(x1,x2,x3)
y
#combine vector x of numeric values with vector y of character values
#into a matrix called M -- coercion
x <- c(1,2,3)
y <- c("one", "two", "three")
M <- cbind(x,y)
M
N <- rbind(x,y)
N
is.character(M[,"x"])
is.character(N["x",])
x1 <- c(1,2,3)
x2 <- x1+3
x3 <- x1+4
y <- rbind(x1,x2,x3)
y
x <- c("one","two","three")
y
L <- list(x,y)
L <- list(x,y)
L
str(L)
?str
typeof
typeof(L)
is.list(L)
typeof(L)
L
L <- list(vector=x,matrix=y)
L
L <- list(x,y)
L
?lm
reg1 <- lm(salary~years+runs, data = baseball)
reg1
reg1_summary <- summary(reg1)
reg1_summary
is.list(reg1)
is.list(reg1_summary)
names(reg1_summary)
reg1_coef <- reg1_summary$coefficients
reg1_coef
is.matrix(reg1_summary$coefficients)
names(baseball)
colnames(baseball)
rownames(baseball)
baseball[,"team"]
baseball$team
View(baseball)
baseball$BA <- baseball$hits/baseball$atbat
baseball$BA0
baseball$BA
View(baseball)
Var1 <- c(1,2,3,4)
Var2 <- c("A","B","C","D")
Example_Data <- data.frame(Var1,Var2)
View(Example_Data)
names(Example_Data) <- c("Numbers","Letters")
Example_Data
library("reshape")
rename
rename
Example_Data <- rename(Example_Data, c(Numbers="Numbers_new"))
Example_Data
baseballBOS <- baseball[baseball$team == "BOS", ]
baseballBOS <- baseball[baseball$team == "BOS", ]
baseballBOS
baseballBOS <- baseball[baseball$team == "BOS", ]
which( baseball$team == "BOS" )
which( baseball$team == "BOS" )
baseballBOS <- baseball[which( baseball$team == "BOS" ), ]
baseballNoBOS <- baseball[-which( baseball$team == "BOS" ), ]
baseballNoBOS2 <- baseball[which( !(baseball$team == "BOS") ), ]
baseballALEast <- baseball[which( baseball$team %in% c("BOS", "NYA",
"BAL", "TOR", "TAM") ),]
View(baseballALEast)
baseballBOS <- subset( baseball, baseball$team == "BOS"  )
baseballBOS2 <- subset( baseball, baseball$team == "BOS", c(name, team, position, hits) )
baseball_sub <- subset(baseball, select=-c(name, salary))
baseball_sub <- subset(baseball, select=-c(name, salary))
